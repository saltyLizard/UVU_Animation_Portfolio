// Spiral Staircase Generator

proc GenerateStaircase(int $numberOfStairs, float $stairLength, float $stairWidth, float $stairHeight, float $pivotPoint, float $stepHeight, float $stepRotation) {
    // Delete any previous staircase groups
    if (`objExists SpiralStaircase`) {
        delete "SpiralStaircase";
    }

    // Create a group for the steps
    string $groupName = `group -em -name "SpiralStaircase"`;

    for ($steps = 0; $steps < $numberOfStairs; $steps++) {
        string $step[] = `polyCube -w $stairLength -h $stairHeight -d $stairWidth -name ("step_" + $steps)`;
        string $stepName = $step[0];

        float $rotY = $steps * $stepRotation;
        float $radius = $pivotPoint;

        // Offset based on bottom left edge
        float $offsetX = -$stairLength * 0.5;
        float $offsetZ = -$stairWidth * 0.5;

        float $xPos = sin(deg_to_rad($rotY)) * $radius + cos(deg_to_rad($rotY)) * $offsetX - sin(deg_to_rad($rotY)) * $offsetZ;
        float $zPos = cos(deg_to_rad($rotY)) * $radius - sin(deg_to_rad($rotY)) * $offsetX - cos(deg_to_rad($rotY)) * $offsetZ;
        float $yPos = $steps * $stepHeight + $stairHeight * 0.5;

        setAttr ($stepName + ".translateX") $xPos;
        setAttr ($stepName + ".translateY") $yPos;
        setAttr ($stepName + ".translateZ") $zPos;
        setAttr ($stepName + ".rotateY") $rotY;

        // Put the step into the group
        parent $stepName $groupName;
    }
}

// Example function call: (number of steps, step length, width, height, offset, rise, rotation)
GenerateStaircase(50, 2, 3, 0.5, 2, 0.6, 20);