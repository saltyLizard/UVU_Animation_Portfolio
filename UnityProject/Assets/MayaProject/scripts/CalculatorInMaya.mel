// All the math functions -----------------------------------------------------

global proc float calculateSum(float $input[]) {
    float $sum = 0.0;
    for ($num in $input) {
        $sum += $num;
    }
    return $sum;
}

global proc float calculateDifference(float $input[]) {
    float $difference = $input[0];
    for ($i = 1; $i < size($input); $i++) {
        $difference -= $input[$i];
    }
    return $difference;
}

global proc float calculateMultiplication(float $input[]) {
    float $product = 1.0;
    for ($num in $input) {
        $product *= $num;
    }
    return $product;
}

global proc float calculateDivision(float $input[]) {
    float $quotient = $input[0];
    for ($i = 1; $i < size($input); $i++) {
        if ($input[$i] == 0) {
            print("Error: Division by zero.\n");
            return 0.0;
        }
        $quotient /= $input[$i];
    }
    return $quotient;
}

global proc float calculatePower(float $input[]) {
    // $input[0] = base, $input[1] = exponent
    return pow($input[0], $input[1]);
}

global proc float calculateMean(float $input[]) {
    float $sum = 0.0;
    for ($num in $input) {
        $sum += $num;
    }
    return $sum / size($input);
}

// Bubble sort for median calculation
global proc float[] sortArray(float $input[]) {
    float $sorted[] = $input;
    int $n = size($sorted);
    for ($i = 0; $i < $n; $i++) {
        for ($j = 0; $j < $n - 1; $j++) {
            if ($sorted[$j] > $sorted[$j + 1]) {
                float $tmp = $sorted[$j];
                $sorted[$j] = $sorted[$j + 1];
                $sorted[$j + 1] = $tmp;
            }
        }
    }
    return $sorted;
}

global proc float calculateMedian(float $input[]) {
    float $sorted[] = sortArray($input);
    int $n = size($sorted);
    if ($n % 2 == 1) {
        return $sorted[$n / 2];
    } else {
        return ($sorted[$n / 2 - 1] + $sorted[$n / 2]) / 2.0;
    }
}


// Calculator function: calls the math functions, prints the result with the inputed numbers
global proc float calculator(float $input[], string $operation) {
    if (size($input) == 0) {
        print("Error: No input numbers provided.\n");
        return 0.0;
    }

    float $result = 0.0;
    int $n = size($input);
    int $i;
    string $expr = "";
    string $nums = "";

    if ($operation == "add" || $operation == "+") {
        $result = calculateSum($input);
        for ($i = 0; $i < $n; $i++) {
            $expr += ($input[$i] + "");
            if ($i < $n - 1) $expr += " + ";
        }
        print($expr + " = " + $result + "\n");
    } 
    else if ($operation == "subtract" || $operation == "-") {
        $result = calculateDifference($input);
        for ($i = 0; $i < $n; $i++) {
            $expr += ($input[$i] + "");
            if ($i < $n - 1) $expr += " - ";
        }
        print($expr + " = " + $result + "\n");
    } 
    else if ($operation == "multiply" ||  $operation == "*") {
        $result = calculateMultiplication($input);
        for ($i = 0; $i < $n; $i++) {
            $expr += ($input[$i] + "");
            if ($i < $n - 1) $expr += " * ";
        }
        print($expr + " = " + $result + "\n");
    } 
    else if ($operation == "divide" || $operation == "/") {
        $result = calculateDivision($input);
        for ($i = 0; $i < $n; $i++) {
            $expr += ($input[$i] + "");
            if ($i < $n - 1) $expr += " / ";
        }
        print($expr + " = " + $result + "\n");
    } 
    else if ($operation == "power" || $operation == "^") {
        if ($n != 2) {
            print("Error: Power requires two inputs (base and exponent).\n");
            return 0.0;
        }
        $result = calculatePower($input);
        $expr = ($input[0] + " ^ " + $input[1]);
        print($expr + " = " + $result + "\n");
    } 
    else if ($operation == "mean" || $operation == "average") {
        $result = calculateMean($input);
        if ($n == 1) {
            $nums = ($input[0] + "");
        } else {
            for ($i = 0; $i < $n - 1; $i++) {
                $nums += ($input[$i] + ", ");
            }
            $nums += ("and " + $input[$n - 1]);
        }
        print("The mean of " + $nums + " is " + $result + "\n");
    } 
    else if ($operation == "median") {
        $result = calculateMedian($input);
        if ($n == 1) {
            $nums = ($input[0] + "");
        } else {
            for ($i = 0; $i < $n - 1; $i++) {
                $nums += ($input[$i] + ", ");
            }
            $nums += ("and " + $input[$n - 1]);
        }
        print("The median of " + $nums + " is " + $result + "\n");
    } else {
        print("Unknown operation: " + $operation + "\n");
        return 0.0;
    }

    return $result;
}


// UI functions -------------------------------------------------------------

// Storage for the numbers inputed into the UI
global float $calc_numbers[];

// Read the numbers entered and return float[]
global proc float[] ui_getNumbers()
{
    global float $calc_numbers[];
    float $out[] = $calc_numbers;
    return $out;
}

// Add a number from the input float field to the list
global proc ui_addNumber()
{
    global float $calc_numbers[];
    float $v = `floatField -q -v calc_inputNum`;
    // append to numeric array
    int $n = size($calc_numbers);
    $calc_numbers[$n] = $v;
    // append display string to list
    textScrollList -e -append ($v) calc_numList;
    // reset input to 0
    floatField -e -v 0.0 calc_inputNum;
}

// Remove selected numbers from the list
global proc ui_removeSelected()
{
    global float $calc_numbers[];
    string $sel[] = `textScrollList -q -si calc_numList`;
    if (!size($sel)) return;
    // Build a new list containing only items not selected, then repopulate
    string $all[] = `textScrollList -q -ai calc_numList`;
    if (!size($all)) return;
    string $keep[];
    for ($i = 0; $i < size($all); $i++) {
        string $item = $all[$i];
        int $found = 0;
        for ($j = 0; $j < size($sel); $j++) {
            if ($item == $sel[$j]) { $found = 1; break; }
        }
        if (!$found) {
            int $k = size($keep);
            $keep[$k] = $item;
        }
    }
    // Repopulate the UI list and rebuild numeric array
    textScrollList -e -removeAll calc_numList;
    $calc_numbers = {};
    for ($i = 0; $i < size($keep); $i++) {
        textScrollList -e -append $keep[$i] calc_numList;
        float $fv = $keep[$i];
        int $m = size($calc_numbers);
        $calc_numbers[$m] = $fv;
    }
}

// Clear all numbers
global proc ui_clearNumbers()
{
    global float $calc_numbers[];
    textScrollList -e -removeAll calc_numList;
    $calc_numbers = {};
}

// Call calculator with chosen operation and update result field
global proc ui_doOperation(string $op)
{
    float $nums[] = ui_getNumbers();
    if (!size($nums)) {
        textField -e -text "No numbers provided" calc_result;
        return;
    }
    float $res = calculator($nums, $op);
    textField -e -text ("Result: " + $res) calc_result;
}

// Build and show UI
global proc showCalculatorUI()
{
    if (`window -exists calculatorWin`) deleteUI -window calculatorWin;

    window -title "Calculator" calculatorWin;
    columnLayout -adjustableColumn true;

    // Number text field, add and remove buttons
    rowLayout -numberOfColumns 3 -columnWidth3 200 60 60;
        floatField -v 0.0 calc_inputNum;
        button -label "Add Num" -command "ui_addNumber()";
        button -label "Remove Selected" -command "ui_removeSelected()";
    setParent ..;

    // List of numbers
    text -label "Numbers:";
    textScrollList -allowMultiSelection true -height 100 calc_numList;

    // Clear and example numbers buttons
    rowLayout -numberOfColumns 2 -columnWidth2 150 150;
        button -label "Clear List" -command "ui_clearNumbers()";
        button -label "Example Numbers" -command "textScrollList -e -removeAll calc_numList; textScrollList -e -append \"2\" calc_numList; textScrollList -e -append \"6\" calc_numList; textScrollList -e -append \"9\" calc_numList;";
    setParent ..;

    // Operation buttons
    text -label "Operations:";
    rowLayout -numberOfColumns 4 -columnWidth4 75 75 75 75;
        button -label "+" -command "ui_doOperation(\"add\")";
        button -label "-" -command "ui_doOperation(\"subtract\")";
        button -label "*" -command "ui_doOperation(\"multiply\")";
        button -label "/" -command "ui_doOperation(\"divide\")";
    setParent ..;

    rowLayout -numberOfColumns 3 -columnWidth3 75 75 75;
        button -label "^" -command "ui_doOperation(\"power\")";
        button -label "mean" -command "ui_doOperation(\"mean\")";
        button -label "median" -command "ui_doOperation(\"median\")";
    setParent ..;

    // Result display
    text -label "Result:";
    textField -editable false -text "" calc_result;

    showWindow calculatorWin;
}

// How to call the UI
showCalculatorUI();